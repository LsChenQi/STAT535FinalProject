install.packages('rstanarm')
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
summary(post1)
round(posterior_interval(post1, prob = 0.9), 2)
source("~/.active-rstudio-document")
round(posterior_interval(post1, prob = 0.9), 2)
source("~/.active-rstudio-document")
round(posterior_interval(post1, prob = 0.9), 2)
?normal
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
summary(post1)
round(posterior_interval(post1, prob = 0.9), 2)
summary(post2)
round(posterior_interval(post2, prob = 0.9), 2)
source("~/.active-rstudio-document")
round(posterior_interval(post2, prob = 0.9), 2)
summary(post1)
round(posterior_interval(postml, prob = 0.9), 2)
summary(postml)
summary(post1)
round(posterior_interval(post1, prob = 0.9), 2)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
round(posterior_interval(post1, prob = 0.9), 2)
round(posterior_interval(post2, prob = 0.9), 2)
summary(post1)
summary(post2)
summary(postml)
postml$stan_summary
postml$terms
round(posterior_interval(post1, prob = 0.95), 2)
round(posterior_interval(post2, prob = 0.95), 2)
round(posterior_interval(postml, prob = 0.95), 2)
summary(postml)
myscore = c(1, 0)
mycount = matrix(c(3, 1, 1, 3), ncol = 2, byrow = T)
myprior = normal(0, 1)
mypost = stan_glm(mycount ~ myscore, family = binomial(link = "logit"), prior = myprior)
summary(mypost)
myscore2 = c(0.5, -0.5)
mypost2 = stan_glm(mycount ~ myscore2, family = binomial(link = "logit"), prior = myprior)
summary(mypost2)
summary(mypost1)
summary(mypost)
summary(mypost)
summary(mypost2)
source("~/Desktop/stat535/Stat535FinalProject/RScript/STAT535.R")
source("~/Desktop/stat535/Stat535FinalProject/RScript/STAT535.R")
getwd
getwd()
rstudioapi::getActiveDocumentContext()$path
rstudioapi::getActiveDocumentContext()$path
source("~/Desktop/stat535/Stat535FinalProject/RScript/STAT535.R")
source("~/Desktop/temp/STAT535FinalProject/RScript/STAT535.R")
eval('rank_1 = tables_html[grep("<td class=\"dtr2 dtc", tables_html)][1:24]')
eval(parse('rank_1 = tables_html[grep("<td class=\"dtr2 dtc", tables_html)][1:24]'))
rank_1 = tables_html[grep("<td class=\"dtr2 dtc", tables_html)][1:24]
eval(parse('rank_1 = tables_html[grep("<td class=\"dtr2 dtc", tables_html)][1:24]'))
parse('rank_1 = tables_html[grep("<td class=\"dtr2 dtc", tables_html)][1:24]')
eval(parse(text = 'rank_1 = tables_html[grep("<td class=\"dtr2 dtc", tables_html)][1:24]'))
eval(parse(text = 'rank_1 = tables_html[grep("<td class=\\\"dtr2 dtc", tables_html)][1:24]'))
eval(parse(text = 'rank_2 = tables_html[grep("<td class=\\\"dtr2 dtc", tables_html)][1:24]'))
?fprintf
?sprintf
?printf
?fprintf
?print
for (i in 1 : 20){
expression = sprintf('rank_%d = tables_html[grep("<td class=\\\"dtr%d dtc", tables_html)][1:24]', i, i)
eval(parse(text = expression))
}
data_processing_lead = function(x, n){
temp = vector()
for(i in 1:length(x)){
if(nchar(x[i])>n){ #if there are more than n chars, those lines are either team names or pts that we want
temp[i] = x[i]
}
temp = na.exclude(temp) # remove all NAs
}
pattern = "(.*)\">|</td>"
temp = gsub(pattern, "", temp) # remove useless strings
done = temp[1:length(temp)] # keep the information we want
return(done)
}
for (i in 1 : 8){
expression = sprintf('rank_%d_clear = data_processing_lead(rank_%d, %d)', i, i, 28)
eval(parse(text = expression))
}
seasons_clear = data_processing(seasons, 30)
data_processing = function(x, n){
temp = vector()
for(i in 1:length(x)){
if(nchar(x[i])>n){ #if there are more than n chars, those lines are either team names or pts that we want
temp[i] = x[i]
}
temp = na.exclude(temp) # remove all NAs
}
pattern = "(.*)\">|</td>"
temp = gsub(pattern, "", temp) # remove useless strings
done = temp[1:length(temp)] # keep the information we want
return(done)
}
# Preprocess data
seasons_clear = data_processing(seasons, 29)
# Seasons
seasons = tables_html[grep("<td class=\"dtr1 dtc", tables_html)][1:24]
# Preprocess data
seasons_clear = data_processing(seasons, 29)
# rank 9 - 20
for (i in 9 : 20){
expression = sprintf('rank_%d_clear = data_processing(rank_%d, %d)', i, i, 29)
eval(parse(text = expression))
}
for (i in 9 : 20){
# remove the rank column
expression = sprintf('rank_%d = rank_%d[-1]', i, i)
eval(parse(text = expression))
expression = sprintf('rank_%d_clear = data_processing(rank_%d, %d)', i, i, 29)
eval(parse(text = expression))
}
all.equal(
length(seasons_clear),
length(rank_1_clear),
length(rank_2_clear),
length(rank_3_clear),
length(rank_4_clear),
length(rank_5_clear),
length(rank_6_clear),
length(rank_7_clear),
length(rank_8_clear),
length(rank_9_clear),
length(rank_10_clear),
length(rank_11_clear),
length(rank_12_clear),
length(rank_13_clear),
length(rank_14_clear),
length(rank_15_clear),
length(rank_16_clear),
length(rank_17_clear),
length(rank_18_clear),
length(rank_19_clear),
length(rank_20_clear))
# Combine all previous info together into a data frame
tables = rbind(seasons_clear,
rank_1_clear,
rank_2_clear,
rank_3_clear,
rank_4_clear,
rank_5_clear,
rank_6_clear,
rank_7_clear,
rank_8_clear,
rank_9_clear,
rank_10_clear,
rank_11_clear,
rank_12_clear,
rank_13_clear,
rank_14_clear,
rank_15_clear,
rank_16_clear,
rank_17_clear,
rank_18_clear,
rank_19_clear,
rank_20_clear)
colnames(tables) = c("2013-14", "Pts", "2014-15", "Pts", "2015-16", "Pts", "2016-17", "Pts", "2017-18", "Pts",
"2018-19", "Pts", "2019-20", "Pts", "2020-21", "Pts")
rownames(tables) = c("Season", 1:20)
# Table for Seasons 2013-14 until 2020-21
head(tables)
teams_processing = function(x){
temp = x[grep("                        <td>[A-Z]|                        <td>bet", x)]
pattern = "(.*)<td>|</td>"
temp_2 = gsub(pattern, "", temp) # remove useless strings
done = vector()
for(i in 1:length(temp_2)){
if((i %% 3)!=1){
done[i] = temp_2[i]
}
}
done = na.exclude(done) # remove all NAs
done = done[1:760]
return(done)
}
goals_processing = function(x){
temp = x[grep("                                                    <td>\\d+", x)]
pattern = "(.*)<td>|</td>"
temp_2 = gsub(pattern, "", temp) # remove useless strings
home = vector()
away = vector()
result = vector()
for(i in 1:length(temp_2)){
home[i] = substr(temp_2[i], 1, 1)
away[i] = substr(temp_2[1], 5, 5)
result[2*i-1] = home[i]
result[2*i] = away[i]
}
done = na.exclude(result) # remove all NAs
return(done)
}
matches = cbind(teams_processing(result_1617_html), goals_processing(result_1617_html),
teams_processing(result_1718_html), goals_processing(result_1718_html),
teams_processing(result_1819_html), goals_processing(result_1819_html),
teams_processing(result_1920_html), goals_processing(result_1920_html),
teams_processing(result_2021_html), goals_processing(result_2021_html))
colnames(matches) = c("2016-17", "Goal(s)", "2017-18", "Goal(s)", "2018-19", "Goal(s)",
"2019-20", "Goal(s)", "2020-21", "Goal(s)")
rownames(matches) = rep(c("Home", "Away"), 380)
# All match results for Seasons 2016-17 until 2020-21
head(matches)
result_1617_html = readLines("../Data/2016_17.html", warn = FALSE)
teams_processing = function(x){
temp = x[grep("                        <td>[A-Z]|                        <td>bet", x)]
pattern = "(.*)<td>|</td>"
temp_2 = gsub(pattern, "", temp) # remove useless strings
done = vector()
for(i in 1:length(temp_2)){
if((i %% 3)!=1){
done[i] = temp_2[i]
}
}
done = na.exclude(done) # remove all NAs
done = done[1:760]
return(done)
}
goals_processing = function(x){
temp = x[grep("                                                    <td>\\d+", x)]
pattern = "(.*)<td>|</td>"
temp_2 = gsub(pattern, "", temp) # remove useless strings
home = vector()
away = vector()
result = vector()
for(i in 1:length(temp_2)){
home[i] = substr(temp_2[i], 1, 1)
away[i] = substr(temp_2[1], 5, 5)
result[2*i-1] = home[i]
result[2*i] = away[i]
}
done = na.exclude(result) # remove all NAs
return(done)
}
matches = cbind(teams_processing(result_1617_html), goals_processing(result_1617_html),
teams_processing(result_1718_html), goals_processing(result_1718_html),
teams_processing(result_1819_html), goals_processing(result_1819_html),
teams_processing(result_1920_html), goals_processing(result_1920_html),
teams_processing(result_2021_html), goals_processing(result_2021_html))
colnames(matches) = c("2016-17", "Goal(s)", "2017-18", "Goal(s)", "2018-19", "Goal(s)",
"2019-20", "Goal(s)", "2020-21", "Goal(s)")
rownames(matches) = rep(c("Home", "Away"), 380)
# All match results for Seasons 2016-17 until 2020-21
head(matches)
result_1617_html = readLines("../Data/2016_17.html", warn = FALSE)
matches = cbind(teams_processing(result_1617_html), goals_processing(result_1617_html),
teams_processing(result_1718_html), goals_processing(result_1718_html),
teams_processing(result_1819_html), goals_processing(result_1819_html),
teams_processing(result_1920_html), goals_processing(result_1920_html),
teams_processing(result_2021_html), goals_processing(result_2021_html))
result_1718_html = readLines("../Data/2017_18.html", warn = FALSE)
# Read the raw data for matches
result_2021_html = readLines("../Data/2020_21.html", warn = FALSE)
result_1920_html = readLines("../Data/2019_20.html", warn = FALSE)
result_1819_html = readLines("../Data/2018_19.html", warn = FALSE)
result_1718_html = readLines("../Data/2017_18.html", warn = FALSE)
result_1617_html = readLines("../Data/2016_17.html", warn = FALSE)
teams_processing = function(x){
temp = x[grep("                        <td>[A-Z]|                        <td>bet", x)]
pattern = "(.*)<td>|</td>"
temp_2 = gsub(pattern, "", temp) # remove useless strings
done = vector()
for(i in 1:length(temp_2)){
if((i %% 3)!=1){
done[i] = temp_2[i]
}
}
done = na.exclude(done) # remove all NAs
done = done[1:760]
return(done)
}
goals_processing = function(x){
temp = x[grep("                                                    <td>\\d+", x)]
pattern = "(.*)<td>|</td>"
temp_2 = gsub(pattern, "", temp) # remove useless strings
home = vector()
away = vector()
result = vector()
for(i in 1:length(temp_2)){
home[i] = substr(temp_2[i], 1, 1)
away[i] = substr(temp_2[1], 5, 5)
result[2*i-1] = home[i]
result[2*i] = away[i]
}
done = na.exclude(result) # remove all NAs
return(done)
}
matches = cbind(teams_processing(result_1617_html), goals_processing(result_1617_html),
teams_processing(result_1718_html), goals_processing(result_1718_html),
teams_processing(result_1819_html), goals_processing(result_1819_html),
teams_processing(result_1920_html), goals_processing(result_1920_html),
teams_processing(result_2021_html), goals_processing(result_2021_html))
colnames(matches) = c("2016-17", "Goal(s)", "2017-18", "Goal(s)", "2018-19", "Goal(s)",
"2019-20", "Goal(s)", "2020-21", "Goal(s)")
rownames(matches) = rep(c("Home", "Away"), 380)
# All match results for Seasons 2016-17 until 2020-21
head(matches)
